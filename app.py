import streamlit as st
import pandas as pd
import os
import joblib

# ==== C·∫•u h√¨nh giao di·ªán chung ====
st.set_page_config(
    page_title="IoT Fault Detection Demo", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# ==== Style b·ªï sung ====
st.markdown("""
    <style>
    .stButton button {
        background-color: #1a73e8 !important;
        color: white !important;
        font-weight: bold !important;
        border-radius: 8px;
        padding: 8px 24px;
        margin-top: 8px;
    }
    .st-expanderHeader {
        font-weight: 600;
        color: #2563eb;
    }
    .stTabs [data-baseweb="tab-list"] button {
        font-size: 1.12rem;
        padding: 0.3rem 1.2rem;
        color: #1a73e8;
    }
    .stTextInput > div > div > input, .stNumberInput input {
        background: #f1f5f9 !important;
        border-radius: 7px;
    }
    .stApp {
        background: #f8fafc;
    }
    </style>
""", unsafe_allow_html=True)

st.markdown(
    "<h1 style='color:#1a73e8; font-size:2.3rem; font-weight:700; margin-bottom:10px;'>üõ†Ô∏è D·ª± ƒëo√°n l·ªói thi·∫øt b·ªã IoT (XGBoost & LightGBM)</h1>", 
    unsafe_allow_html=True
)

MODEL_DIR = 'evaluation/pipline'
xgb_model_path = os.path.join(MODEL_DIR, 'xgb_final_model.pkl')
lgbm_model_path = os.path.join(MODEL_DIR, 'lgbm_final_model.pkl')

# ==== Ki·ªÉm tra file model ====
if not (os.path.exists(xgb_model_path) and os.path.exists(lgbm_model_path)):
    st.error("‚ùå Kh√¥ng t√¨m th·∫•y file model! H√£y ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.")
    st.stop()

try:
    xgb_model = joblib.load(xgb_model_path)
    lgbm_model = joblib.load(lgbm_model_path)
except Exception as e:
    st.error(f"‚ùå L·ªói khi load model: {e}")
    st.stop()

feature_list = [
    'Temperature', 'Vibration', 'Pressure', 'Voltage', 'Current',
    'FFT_Feature1', 'FFT_Feature2', 'Anomaly_Score'
]

# ===== Tabs giao di·ªán ch√≠nh =====
tab1, tab2, tab3 = st.tabs([
    "üìå D·ª± ƒëo√°n m·∫´u l·∫ª", 
    "üìÇ D·ª± ƒëo√°n file CSV", 
    "‚ùì H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"
])

# ==== TAB 1: D·ª± ƒëo√°n m·∫´u l·∫ª ====
with tab1:
    st.markdown("### üìù Nh·∫≠p th√¥ng s·ªë c·∫£m bi·∫øn & ch·ªçn m√¥ h√¨nh ƒë·ªÉ d·ª± ƒëo√°n l·ªói")
    st.write(
        """
        <span style='font-size: 1.02rem; color:#373d44;'>
        ƒêi·ªÅn ƒë·ªß gi√° tr·ªã c√°c tr∆∞·ªùng d∆∞·ªõi ƒë√¢y, ch·ªçn m√¥ h√¨nh mu·ªën s·ª≠ d·ª•ng, v√† nh·∫•n <b>D·ª± ƒëo√°n</b>.<br>
        K·∫øt qu·∫£ d·ª± ƒëo√°n v√† x√°c su·∫•t l·ªói s·∫Ω hi·ªÉn th·ªã ngay l·∫≠p t·ª©c.
        </span>
        """, unsafe_allow_html=True
    )
    with st.container():
        col1, col2 = st.columns([2, 3])
        with col1:
            st.markdown("#### 1. Ch·ªçn m√¥ h√¨nh")
            model_name = st.radio("Ch·ªçn model", ("XGBoost", "LightGBM"), horizontal=True, index=0)

            st.markdown("#### 2. Nh·∫≠p th√¥ng s·ªë c·∫£m bi·∫øn")
            inputs = {}
            for feat in feature_list:
                inputs[feat] = st.number_input(feat, value=0.0, format="%.3f", step=0.01)

            if st.button("üîç D·ª± ƒëo√°n", use_container_width=True):
                input_df = pd.DataFrame([inputs])
                model = xgb_model if model_name == "XGBoost" else lgbm_model
                try:
                    pred = model.predict(input_df)[0]
                    proba = model.predict_proba(input_df)[0]
                    label = {
                        0: "‚úÖ B√¨nh th∆∞·ªùng",
                        1: "‚ö†Ô∏è L·ªói lo·∫°i 1",
                        2: "‚ùó L·ªói lo·∫°i 2",
                        3: "üî• L·ªói lo·∫°i 3"
                    }.get(pred, str(pred))
                    st.success(f"**K·∫øt qu·∫£ d·ª± ƒëo√°n Fault_Type:** `{label}`")
                    st.markdown("##### X√°c su·∫•t t·ª´ng l·ªõp l·ªói:")
                    df_prob = pd.DataFrame({'X√°c su·∫•t (%)': np.round(proba*100, 2)}, 
                                          index=[f'Fault_Type {i}' for i in range(len(proba))])
                    st.dataframe(df_prob, use_container_width=True, height=180)
                    st.bar_chart(df_prob)
                except Exception as e:
                    st.error(f"‚ùå L·ªói khi d·ª± ƒëo√°n: {e}")

        with col2:
            st.markdown("""
            <div style='background:#f0f6ff; padding: 18px 16px; border-radius:14px; font-size: 1.10rem;'>
                <b>H∆∞·ªõng d·∫´n:</b> <br>
                <ul>
                  <li>Ch·ªçn m√¥ h√¨nh: <b>XGBoost</b> ho·∫∑c <b>LightGBM</b></li>
                  <li>ƒêi·ªÅn gi√° tr·ªã c·∫£m bi·∫øn cho t·ª´ng tr∆∞·ªùng</li>
                  <li>Nh·∫•n <b>D·ª± ƒëo√°n</b> ƒë·ªÉ xem k·∫øt qu·∫£</li>
                  <li><b>Fault_Type:</b> 0 = B√¨nh th∆∞·ªùng, 1/2/3 = c√°c lo·∫°i l·ªói</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

# ==== TAB 2: D·ª± ƒëo√°n file CSV ====
with tab2:
    st.markdown("### üìÇ Upload file CSV ƒë·ªÉ d·ª± ƒëo√°n h√†ng lo·∫°t")
    uploaded_file = st.file_uploader("T·∫£i l√™n file CSV d·ªØ li·ªáu", type=['csv'])
    model_batch = st.radio("Ch·ªçn m√¥ h√¨nh", ("XGBoost", "LightGBM"), horizontal=True, index=0)
    if uploaded_file is not None:
        try:
            df_batch = pd.read_csv(uploaded_file)
            if not all([col in df_batch.columns for col in feature_list]):
                st.error("‚ö†Ô∏è File thi·∫øu c·ªôt, c·∫ßn ƒë·ªß: " + ", ".join(feature_list))
            else:
                model = xgb_model if model_batch == "XGBoost" else lgbm_model
                batch_pred = model.predict(df_batch[feature_list])
                label_map = {
                    0: "B√¨nh th∆∞·ªùng",
                    1: "L·ªói lo·∫°i 1",
                    2: "L·ªói lo·∫°i 2",
                    3: "L·ªói lo·∫°i 3"
                }
                pred_label = [label_map.get(x, x) for x in batch_pred]
                st.success("‚úÖ D·ª± ƒëo√°n th√†nh c√¥ng! K·∫øt qu·∫£ b√™n d∆∞·ªõi:")
                st.dataframe(df_batch.assign(Fault_Prediction=pred_label), use_container_width=True)
                csv_out = df_batch.assign(Fault_Prediction=pred_label).to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="‚¨áÔ∏è T·∫£i v·ªÅ k·∫øt qu·∫£ CSV",
                    data=csv_out,
                    file_name='prediction_results.csv',
                    mime='text/csv'
                )
        except Exception as e:
            st.error(f"‚ùå L·ªói khi ƒë·ªçc file ho·∫∑c d·ª± ƒëo√°n batch: {e}")

# ==== TAB 3: H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ====
with tab3:
    st.markdown("### ‚ÑπÔ∏è H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng d·ª± ƒëo√°n l·ªói thi·∫øt b·ªã IoT")
    st.markdown("""
    <div style='background:#e8f3fe; border-radius: 12px; padding: 16px; font-size: 1.10rem;'>
    <ul>
        <li><b>Tab 1:</b> D·ª± ƒëo√°n nhanh t·ª´ng m·∫´u b·∫±ng c√°ch nh·∫≠p s·ªë li·ªáu c·∫£m bi·∫øn v√† ch·ªçn m√¥ h√¨nh.</li>
        <li><b>Tab 2:</b> Upload file CSV (c√≥ ƒë·∫ßy ƒë·ªß c√°c c·ªôt c·∫£m bi·∫øn) ƒë·ªÉ d·ª± ƒëo√°n h√†ng lo·∫°t.</li>
        <li>K·∫øt qu·∫£ tr·∫£ v·ªÅ g·ªìm nh√£n l·ªói (<b>Fault_Type</b>) v√† x√°c su·∫•t t·ª´ng lo·∫°i l·ªói.</li>
        <li>M√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán g·ªìm <b>XGBoost</b> v√† <b>LightGBM</b>. C√≥ th·ªÉ ch·ªçn nhanh gi·ªØa 2 lo·∫°i n√†y.</li>
        <li>0 = B√¨nh th∆∞·ªùng, 1/2/3 = c√°c lo·∫°i l·ªói kh√°c nhau.</li>
        <li>File k·∫øt qu·∫£ d·ª± ƒëo√°n CSV c√≥ th·ªÉ t·∫£i v·ªÅ ngay.</li>
    </ul>
    </div>
    """, unsafe_allow_html=True)
